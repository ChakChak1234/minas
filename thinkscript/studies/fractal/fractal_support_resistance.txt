# Support and Resistance Fractal Pivots
# Mobius
# V01.01.2011
#hint: Fractal Pivots: use multiple instances of the study set with different lengths to find fractal pivots inside wider fractal ranges.

# User Inputs
input n = 5; #hint n: Length for calculations.
# Internal Script Reference
script LinePlot {
    input LineLimit = 0;
    input OnExpansion = yes;
    input data = close;
    input bar = 0;
    def ThisBar = HighestAll(bar);
    def cLine = if bar == ThisBar
                then data
                else Double.NaN;
    plot P = if ThisBar - LineLimit <= bar
             then HighestAll(cLine)
             else Double.NaN;
}
# Variables
def o = open;
def h = high;
def l = low;
def c = close;
def bar = BarNumber();
def hh = fold i = 1 to n + 1 
         with p = 1
         while p 
         do h > GetValue(h, -i);
def PH = if (bar > n and 
             h == Highest(h, n) and 
                hh) 
         then h 
         else Double.NaN;
def ll = fold j = 1 to n + 1 
         with q = 1
         while q 
         do l < GetValue(l, -j);
def PL = if (bar > n and 
             l == Lowest(l, n) and
             ll) 
         then l 
         else Double.NaN;
def PHBar = if !IsNaN(PH) 
            then bar 
            else PHBar[1];
def PLBar = if !IsNaN(PL) 
            then bar 
            else PLBar[1];
def PHL = if !IsNaN(PH) 
          then PH 
          else PHL[1];
def priorPHBar = if PHL != PHL[1] 
                 then PHBar[1] 
                 else priorPHBar[1];
def PLL = if !IsNaN(PL) 
          then PL 
          else PLL[1];
def priorPLBar = if PLL != PLL[1] 
                 then PLBar[1] 
                 else priorPLBar[1];
def HighPivots = bar >= HighestAll(priorPHBar);
def LowPivots = bar >= HighestAll(priorPLBar);
def R1pivot = if PHL > 0 and 
                 HighPivots 
              then PHL 
              else Double.NaN;
def S1pivot = if LowPivots 
              then PL 
              else Double.NaN;
def R1value = R1pivot;
def R1bar = PHbar;
def R1limit = bar - R1bar;
def R2bar = priorPHbar;
def R2limit = bar - R2bar;
def R2value = if barNumber() == HighestAll(R2bar)
              then h
              else R2value[1];
def R3bar = if priorPHbar != priorPHbar[1]
            then priorPHbar[1]
            else R3bar[1];
def R3limit = bar - R3bar;
def R3value = if barNumber() == HighestAll(R3bar)
              then h
              else R3value[1];
def S1value = S1pivot;
def S1bar = PLbar;
def S1limit = bar - S1bar;
def S2bAR = PriorPLBar;
def S2limit = bar - S2bar;
def S2value = if bar == HighestAll(S2bar)
              then l
              else S2value[1];
def S3bar = if priorPLbar != priorPLbar[1]
            then priorPLbar[1]
            else S3bar[1];
def S3limit = bar - S3bar;
def S3value = if barNumber() == HighestAll(S3bar)
              then l
              else S3value[1];
def BubbleLocation = isNaN(close[1]) and !isNaN(close[2]);
# Plots
plot R1 = LinePlot(Linelimit = R1Limit, data = R1value, bar = R1bar);
plot R2 = LinePlot(LineLimit = R2limit, data = R2value, bar = R2bar).P;
plot R3 = LinePlot(LineLimit = R3limit, data = R3value, bar = R3bar).P;
plot S1 = LinePlot(LineLimit = S1limit, data = S1value, bar = S1bar).P;
plot S2 = LinePlot(LineLimit = S2limit, data = S2value, bar = S2bar).P;
plot S3 = LinePlot(LineLimit = S3limit, data = S3value, bar = S3bar).P;
R1.AssignValueColor(if R1 == Min(Min(R1, R2), R3) 
                    then Color.Green
                    else if R1 == Max(Max(R1, R2), R3)
                         then Color.Blue
                         else Color.Yellow);
addChartBubble(BubbleLocation, R1,
                               if R1 == Min(Min(R1, R2), R3) 
                               then "R1"
                               else if R1 == Max(Max(R1, R2), R3)
                                    then "R3"
                                    else "R2",
              if R1 == Min(Min(R1, R2), R3) 
              then Color.Green
              else if R1 == Max(Max(R1, R2), R3)
                   then Color.Blue
                   else Color.Yellow);
R2.AssignValueColor(if R2 == Min(Min(R1, R2), R3) 
                    then Color.Green
                    else if R2 == Max(Max(R1, R2), R3)
                         then Color.Blue
                         else Color.Yellow);
addChartBubble(BubbleLocation, R2,
                               if R2 == Min(Min(R1, R2), R3) 
                               then "R1"
                               else if R2 == Max(Max(R1, R2), R3)
                                    then "R3"
                                    else "R2",
              if R2 == Min(Min(R1, R2), R3) 
              then Color.Green
              else if R2 == Max(Max(R1, R2), R3)
                   then Color.Blue
                   else Color.Yellow);
R3.AssignValueColor(if R3 == Min(Min(R1, R2), R3) 
                    then Color.Green
                    else if R3 == Max(Max(R1, R2), R3)
                         then Color.Blue
                         else Color.Yellow);
addChartBubble(BubbleLocation, R3,
                               if R3 == Min(Min(R1, R2), R3) 
                               then "R1"
                               else if R3 == Max(Max(R1, R2), R3)
                                    then "R3"
                                    else "R2",
              if R3 == Min(Min(R1, R2), R3) 
              then Color.Green
              else if R3 == Max(Max(R1, R2), R3)
                   then Color.Blue
                   else Color.Yellow);
S1.AssignValueColor(if S1 == Min(Min(S1, S2), S3) 
                    then Color.Plum
                    else if S1 == Max(Max(S1, S2), S3)
                         then Color.Red
                         else Color.Magenta);
addChartBubble(BubbleLocation, S1,
                               if S1 == Min(Min(S1, S2), S3) 
                               then "S3"
                               else if S1 == Max(Max(S1, S2), S3)
                                    then "S1"
                                    else "S2",
              if S1 == Min(Min(S1, S2), S3) 
              then Color.Plum
              else if S1 == Max(Max(S1, S2), S3)
                   then Color.Red
                   else Color.Magenta);
S2.AssignValueColor(if S2 == Min(Min(S1, S2), S3) 
                    then Color.Plum
                    else if S2 == Max(Max(S1, S2), S3)
                         then Color.Red
                         else Color.Magenta);
addChartBubble(BubbleLocation, S2,
                               if S2 == Min(Min(S1, S2), S3) 
                               then "S3"
                               else if S2 == Max(Max(S1, S2), S3)
                                    then "S1"
                                    else "S2",
              if S2 == Min(Min(S1, S2), S3) 
              then Color.Plum
              else if S2 == Max(Max(S1, S2), S3)
                   then Color.Red
                   else Color.Magenta);
S3.AssignValueColor(if S3 == Min(Min(S1, S2), S3) 
                    then Color.Plum
                    else if S3 == Max(Max(S1, S2), S3)
                         then Color.Red
                         else Color.Magenta);
addChartBubble(BubbleLocation, S3,
                               if S3 == Min(Min(S1, S2), S3) 
                               then "S3"
                               else if S3 == Max(Max(S1, S2), S3)
                                    then "S1"
                                    else "S2",
              if S3 == Min(Min(S1, S2), S3) 
              then Color.Plum
              else if S3 == Max(Max(S1, S2), S3)
                   then Color.Red
                   else Color.Magenta);
alert(close crosses above R1, "", Alert.Bar, Sound.Chimes);
alert(close crosses above R2, "", Alert.Bar, Sound.Chimes);
alert(close crosses above R3, "", Alert.Bar, Sound.Chimes);
alert(close crosses below S1, "", Alert.Bar, Sound.Ring);
alert(close crosses below S2, "", Alert.Bar, Sound.Ring);
alert(close crosses below S3, "", Alert.Bar, Sound.Ring);

# End Code Support and Resistance Fractal Pivots